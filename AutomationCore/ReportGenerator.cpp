#include "ReportGenerator.h"
#include <chrono>
#include <ctime>
#include <iomanip>
#include <sstream>
#include <algorithm>

// HTML报告生成器实现

std::string ReportGenerator::getCurrentDateTime()
{
    auto now = std::time(nullptr);
    std::tm localTime{}; // 栈上创建tm对象
#ifdef _WIN32
    localtime_s(&localTime, &now); // Windows安全函数
#else
    localtime_r(&localTime, &now); // Linux/macOS线程安全函数
#endif
    std::stringstream ss;
    ss << std::put_time(&localTime, "%Y-%m-%d %H:%M:%S");
    return ss.str();
}

std::string ReportGenerator::generateTestCaseReport(const TestExecutionResult &result, ReportFormat format)
{
    switch (format)
    {
    case ReportFormat::TEXT:
        return generateTestCaseTextReport(result);
    case ReportFormat::HTML:
        return generateTestCaseHtmlReport(result);
    case ReportFormat::XML:
        return generateTestCaseXmlReport(result);
    default:
        return "";
    }
}

std::string ReportGenerator::generateSummaryReport(const std::vector<TestExecutionResult> &results,
                                                   ReportFormat format,
                                                   const std::string &title)
{
    switch (format)
    {
    case ReportFormat::TEXT:
        return generateSummaryTextReport(results, title);
    case ReportFormat::HTML:
        return generateSummaryHtmlReport(results, title);
    case ReportFormat::XML:
        return generateSummaryXmlReport(results, title);
    default:
        return "";
    }
}

std::string ReportGenerator::generateTestCaseHtmlReport(const TestExecutionResult &result)
{
    std::stringstream html;
    std::string m_title(""); // for build
    // HTML头部
    html << "<!DOCTYPE html>\n";
    html << "<html lang=\"en\">\n";
    html << "<head>\n";
    html << "    <meta charset=\"UTF-8\">\n";
    html << "    <title>" << m_title << " - " << result.case_name << "</title>\n";
    html << "    <style>\n";
    html << "        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 20px; }\n";
    html << "        .header { background-color: #f5f5f5; padding: 10px; border-radius: 5px; }\n";
    html << "        .summary { margin: 20px 0; padding: 10px; border-radius: 5px; }\n";
    html << "        .success { background-color: #dff0d8; border: 1px solid #d6e9c6; }\n";
    html << "        .failure { background-color: #f2dede; border: 1px solid #ebccd1; }\n";
    html << "        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n";
    html << "        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n";
    html << "        th { background-color: #f2f2f2; }\n";
    html << "        .log { margin-top: 20px; padding: 10px; background-color: #f9f9f9; border-radius: 5px; }\n";
    html << "    </style>\n";
    html << "</head>\n";
    html << "<body>\n";

    // 标题和基本信息
    html << "    <div class=\"header\">\n";
    html << "        <h1>" << m_title << "</h1>\n";
    html << "        <p>Test Case: " << result.case_name << "</p>\n";
    html << "        <p>Execution Date: " << getCurrentDateTime() << "</p>\n";
    // html << "        <p>Generated by: " << m_generator << "</p>\n";
    html << "    </div>\n";

    // 摘要信息
    html << "    <div class=\"summary " << (result.overall_success ? "success" : "failure") << "\">\n";
    html << "        <h2>Summary</h2>\n";
    html << "        <p>Status: " << (result.overall_success ? "Passed" : "Failed") << "</p>\n";
    html << "        <p>Total Steps: " << result.step_results.size() << "</p>\n";

    int passedSteps = std::count_if(result.step_results.begin(), result.step_results.end(),
                                    [](const StepExecutionResult &step)
                                    { return step.result.success; });

    html << "        <p>Passed Steps: " << passedSteps << "</p>\n";
    html << "        <p>Failed Steps: " << (result.step_results.size() - passedSteps) << "</p>\n";
    html << "        <p>Total Execution Time: " << result.total_duration.count() << " ms</p>\n";
    html << "    </div>\n";

    // 步骤详情表格
    html << "    <h2>Test Steps</h2>\n";
    html << "    <table>\n";
    html << "        <tr>\n";
    html << "            <th>Step ID</th>\n";
    html << "            <th>Plugin</th>\n";
    html << "            <th>Action</th>\n";
    html << "            <th>Target</th>\n";
    html << "            <th>Status</th>\n";
    html << "            <th>Time (ms)</th>\n";
    html << "            <th>Message</th>\n";
    html << "        </tr>\n";

    for (const auto &step : result.step_results)
    {
        html << "        <tr>\n";
        html << "            <td>" << step.step_id << "</td>\n";
        //      html << "            <td>" << step.plugin_name << "</td>\n";
        //      html << "            <td>" << step.action << "</td>\n";
        //      html << "            <td>" << step.target << "</td>\n";
        html << "            <td style=\"background-color: " << (step.result.success ? "#dff0d8" : "#f2dede") << "\">\n";
        html << "                " << (step.result.success ? "Passed" : "Failed") << "\n";
        html << "            </td>\n";
        html << "            <td>" << step.duration.count() << "</td>\n";
        html << "            <td>" << step.result.message << "</td>\n";
        html << "        </tr>\n";
    }

    html << "    </table>\n";
    /*
    // 执行日志
    html << "    <div class=\"log\">\n";
    html << "        <h2>Execution Log</h2>\n";
    html << "        <pre>" << result.execution_log << "</pre>\n";
    html << "    </div>\n";
    */
    // HTML尾部
    html << "</body>\n";
    html << "</html>";

    return html.str();
}

std::string ReportGenerator::generateSummaryHtmlReport(const std::vector<TestExecutionResult> &results,
                                                       const std::string &title)
{
    std::stringstream html;

    // HTML头部
    html << "<!DOCTYPE html>\n";
    html << "<html lang=\"en\">\n";
    html << "<head>\n";
    html << "    <meta charset=\"UTF-8\">\n";
    html << "    <title>" << title << " - Summary</title>\n";
    html << "    <style>\n";
    html << "        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 20px; }\n";
    html << "        .header { background-color: #f5f5f5; padding: 10px; border-radius: 5px; }\n";
    html << "        .summary { margin: 20px 0; padding: 10px; border-radius: 5px; border: 1px solid #ddd; }\n";
    html << "        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n";
    html << "        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n";
    html << "        th { background-color: #f2f2f2; }\n";
    html << "        .success { color: #3c763d; }\n";
    html << "        .failure { color: #a94442; }\n";
    html << "    </style>\n";
    html << "</head>\n";
    html << "<body>\n";

    // 标题和基本信息
    html << "    <div class=\"header\">\n";
    html << "        <h1>" << title << " - Summary Report</h1>\n";
    html << "        <p>Report Date: " << getCurrentDateTime() << "</p>\n";
    //  html << "        <p>Generated by: " << m_generator << "</p>\n";
    html << "    </div>\n";

    // 总体摘要
    int totalCases = results.size();
    int passedCases = std::count_if(results.begin(), results.end(),
                                    [](const TestExecutionResult &res)
                                    { return res.overall_success; });
    int failedCases = totalCases - passedCases;

    // 计算总步骤数和总时间
    int totalSteps = 0;
    std::chrono::milliseconds::rep totalDuration = 0;

    for (const auto &res : results)
    {
        totalSteps += res.step_results.size();
        totalDuration += res.total_duration.count();
    }

    html << "    <div class=\"summary\">\n";
    html << "        <h2>Overall Summary</h2>\n";
    html << "        <p>Total Test Cases: " << totalCases << "</p>\n";
    html << "        <p>Passed Test Cases: <span class=\"success\">" << passedCases << "</span></p>\n";
    html << "        <p>Failed Test Cases: <span class=\"failure\">" << failedCases << "</span></p>\n";
    html << "        <p>Total Test Steps: " << totalSteps << "</p>\n";
    html << "        <p>Total Execution Time: " << totalDuration << " ms</p>\n";
    html << "    </div>\n";

    // 测试用例列表
    html << "    <h2>Test Case Details</h2>\n";
    html << "    <table>\n";
    html << "        <tr>\n";
    html << "            <th>Test Case ID</th>\n";
    html << "            <th>Test Case Name</th>\n";
    html << "            <th>Status</th>\n";
    html << "            <th>Steps</th>\n";
    html << "            <th>Time (ms)</th>\n";
    html << "        </tr>\n";

    for (const auto &res : results)
    {
        html << "        <tr>\n";
        html << "            <td>" << res.case_id << "</td>\n";
        html << "            <td>" << res.case_name << "</td>\n";
        html << "            <td class=\"" << (res.overall_success ? "success" : "failure") << "\">\n";
        html << "                " << (res.overall_success ? "Passed" : "Failed") << "\n";
        html << "            </td>\n";
        html << "            <td>" << res.step_results.size() << "</td>\n";
        html << "            <td>" << res.total_duration.count() << "</td>\n";
        html << "        </tr>\n";
    }

    html << "    </table>\n";
    html << "</body>\n";
    html << "</html>";

    return html.str();
}

// 文本报告生成器实现

std::string ReportGenerator::generateTestCaseTextReport(const TestExecutionResult &result)
{
    std::stringstream text;

    // 标题
    text << "=============================================\n";
    text << "TEST CASE REPORT: " << result.case_name << "\n";
    text << "=============================================\n\n";

    // 摘要信息
    text << "SUMMARY:\n";
    text << m_indentation << "Status: " << (result.overall_success ? "PASSED" : "FAILED") << "\n";
    text << m_indentation << "Total Steps: " << result.step_results.size() << "\n";

    int passedSteps = std::count_if(result.step_results.begin(), result.step_results.end(),
                                    [](const StepExecutionResult &step)
                                    { return step.result.success; });

    text << m_indentation << "Passed Steps: " << passedSteps << "\n";
    text << m_indentation << "Failed Steps: " << (result.step_results.size() - passedSteps) << "\n";
    text << m_indentation << "Total Execution Time: " << result.total_duration.count() << " ms\n\n";

    // 步骤详情
    text << "STEP DETAILS:\n";
    for (const auto &step : result.step_results)
    {
        text << m_indentation << "Step " << step.step_id << ":\n";
        //     text << m_indentation << m_indentation << "Plugin: " << step.plugin_name << "\n";
        //     text << m_indentation << m_indentation << "Action: " << step.action << "\n";
        //    text << m_indentation << m_indentation << "Target: " << step.target << "\n";
        text << m_indentation << m_indentation << "Status: " << (step.result.success ? "PASSED" : "FAILED") << "\n";
        text << m_indentation << m_indentation << "Time: " << step.duration.count() << " ms\n";
        if (!step.result.message.empty())
        {
            text << m_indentation << m_indentation << "Message: " << step.result.message << "\n";
        }
        text << "\n";
    }
    /*
        // 执行日志
        text << "EXECUTION LOG:\n";
        text << "---------------------------------------------\n";
        text << result.execution_log << "\n";
        text << "---------------------------------------------\n";
    */
    return text.str();
}

std::string ReportGenerator::generateSummaryTextReport(const std::vector<TestExecutionResult> &results, const std::string &title)
{
    std::stringstream text;

    // 标题
    text << "=============================================\n";
    text << "TEST SUMMARY REPORT\n";
    text << "=============================================\n\n";

    // 总体摘要
    int totalCases = results.size();
    int passedCases = std::count_if(results.begin(), results.end(),
                                    [](const TestExecutionResult &res)
                                    { return res.overall_success; });
    int failedCases = totalCases - passedCases;

    // 计算总步骤数和总时间
    int totalSteps = 0;
    std::chrono::milliseconds::rep totalDuration = 0;

    for (const auto &res : results)
    {
        totalSteps += res.step_results.size();
        totalDuration += res.total_duration.count();
    }

    text << "OVERALL SUMMARY:\n";
    text << m_indentation << "Total Test Cases: " << totalCases << "\n";
    text << m_indentation << "Passed Test Cases: " << passedCases << "\n";
    text << m_indentation << "Failed Test Cases: " << failedCases << "\n";
    text << m_indentation << "Total Test Steps: " << totalSteps << "\n";
    text << m_indentation << "Total Execution Time: " << totalDuration << " ms\n\n";

    // 测试用例列表
    text << "TEST CASE RESULTS:\n";
    text << std::left
         << m_indentation << std::setw(8) << "ID"
         << std::setw(30) << "NAME"
         << std::setw(8) << "STATUS"
         << std::setw(6) << "STEPS"
         << "TIME (ms)\n";
    text << m_indentation << std::string(60, '-') << "\n";

    for (const auto &res : results)
    {
        text << m_indentation << std::left
             << std::setw(8) << res.case_id
             << std::setw(30) << (res.case_name.length() > 27 ? res.case_name.substr(0, 27) + "..." : res.case_name)
             << std::setw(8) << (res.overall_success ? "PASSED" : "FAILED")
             << std::setw(6) << res.step_results.size()
             << res.total_duration.count() << "\n";
    }

    return text.str();
}

// XML报告生成器实现

std::string ReportGenerator::generateTestCaseXmlReport(const TestExecutionResult &result)
{
    std::stringstream xml;

    xml << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    xml << "<test-case-report>\n";
    xml << "    <test-case id=\"" << result.case_id << "\" name=\"" << result.case_name << "\">\n";

    // 摘要信息
    int passedSteps = std::count_if(result.step_results.begin(), result.step_results.end(),
                                    [](const StepExecutionResult &step)
                                    { return step.result.success; });

    xml << "        <summary>\n";
    xml << "            <status>" << (result.overall_success ? "passed" : "failed") << "</status>\n";
    xml << "            <total-steps>" << result.step_results.size() << "</total-steps>\n";
    xml << "            <passed-steps>" << passedSteps << "</passed-steps>\n";
    xml << "            <failed-steps>" << (result.step_results.size() - passedSteps) << "</failed-steps>\n";
    xml << "            <total-duration>" << result.total_duration.count() << "</total-duration>\n";
    xml << "        </summary>\n";

    // 步骤详情
    xml << "        <steps>\n";
    for (const auto &step : result.step_results)
    {
        xml << "            <step id=\"" << step.step_id << "\">\n";
        //      xml << "                <plugin>" << step.plugin_name << "</plugin>\n";
        //     xml << "                <action>" << step.action << "</action>\n";
        //      xml << "                <target>" << step.target << "</target>\n";
        xml << "                <status>" << (step.result.success ? "passed" : "failed") << "</status>\n";
        xml << "                <duration>" << step.duration.count() << "</duration>\n";
        if (!step.result.message.empty())
        {
            xml << "                <message>" << step.result.message << "</message>\n";
        }
        xml << "            </step>\n";
    }
    xml << "        </steps>\n";

    // 执行日志
    //   xml << "        <execution-log><![CDATA[" << result.execution_log << "]]></execution-log>\n";

    xml << "    </test-case>\n";
    xml << "</test-case-report>";

    return xml.str();
}

std::string ReportGenerator::generateSummaryXmlReport(const std::vector<TestExecutionResult> &results, const std::string &title)
{
    std::stringstream xml;

    xml << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    xml << "<test-summary-report>\n";

    // 总体摘要
    int totalCases = results.size();
    int passedCases = std::count_if(results.begin(), results.end(),
                                    [](const TestExecutionResult &res)
                                    { return res.overall_success; });
    int failedCases = totalCases - passedCases;

    // 计算总步骤数和总时间
    int totalSteps = 0;
    std::chrono::milliseconds::rep totalDuration = 0;

    for (const auto &res : results)
    {
        totalSteps += res.step_results.size();
        totalDuration += res.total_duration.count();
    }

    xml << "    <overall-summary>\n";
    xml << "        <total-test-cases>" << totalCases << "</total-test-cases>\n";
    xml << "        <passed-test-cases>" << passedCases << "</passed-test-cases>\n";
    xml << "        <failed-test-cases>" << failedCases << "</failed-test-cases>\n";
    xml << "        <total-test-steps>" << totalSteps << "</total-test-steps>\n";
    xml << "        <total-duration>" << totalDuration << "</total-duration>\n";
    xml << "    </overall-summary>\n";

    // 测试用例列表
    xml << "    <test-cases>\n";
    for (const auto &res : results)
    {
        xml << "        <test-case id=\"" << res.case_id << "\" name=\"" << res.case_name << "\">\n";
        xml << "            <status>" << (res.overall_success ? "passed" : "failed") << "</status>\n";
        xml << "            <steps-count>" << res.step_results.size() << "</steps-count>\n";
        xml << "            <duration>" << res.total_duration.count() << "</duration>\n";
        xml << "        </test-case>\n";
    }
    xml << "    </test-cases>\n";

    xml << "</test-summary-report>";

    return xml.str();
}
